{"version":3,"sources":["../../../src/ServerComponents/UpdateSchema/SchemaQuery.js"],"names":["SchemaQuery","Promise","resolve","reject","mysqlQuery","connection","CreateConnection","connect","query","error","results","fields","end","Error","schema","tupla","TABLE_NAME","COLUMN_NAME","DATA_TYPE","lastUpdate","Date","now","fs","writeFile","path","join","__dirname","JSON","stringify","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAGA;;;;AAIA,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAAEC,OAAF,EAAWC,MAAX,EAAuB;AAExC;AACA,QAAMC,UAAU,4HAAhB;AAAA,QACMC,UAAU,GAAIC,4BADpB;AAGAD,IAAAA,UAAU,CAACE,OAAX,GANwC,CAQxC;;AACAF,IAAAA,UAAU,CAACG,KAAX,CAAkBJ,UAAlB,EAA8B,UAACK,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAExDN,MAAAA,UAAU,CAACO,GAAX;AAEA,UAAIH,KAAJ,EAAWN,MAAM,CAAC,IAAIU,KAAJ,CAAUJ,KAAV,CAAD,CAAN,CAJ6C,CAMxD;AACA;;AACA,UAAMK,MAAM,GAAG,EAAf;AARwD;AAAA;AAAA;;AAAA;AAUxD,6BAAkBJ,OAAlB,8HAA4B;AAAA,cAAnBK,KAAmB;;AAC1B,cAAI,EAAEA,KAAK,CAACC,UAAN,IAAoBF,MAAtB,CAAJ,EAAoC;AAClCA,YAAAA,MAAM,CAACC,KAAK,CAACC,UAAP,CAAN,GAA2B,EAA3B;AACD;;AACDF,UAAAA,MAAM,CAACC,KAAK,CAACC,UAAP,CAAN,CAAyBD,KAAK,CAACE,WAA/B,IAA8CF,KAAK,CAACG,SAApD;AACD,SAfuD,CAiBxD;;AAjBwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBxDJ,MAAAA,MAAM,CAACK,UAAP,GAAoBC,IAAI,CAACC,GAAL,EAApB,CAlBwD,CAoBxD;;AACAC,qBAAGC,SAAH,CAAcC,iBAAKC,IAAL,CAAWC,SAAX,EAAsB,+BAAtB,CAAd,EAAsEC,IAAI,CAACC,SAAL,CAAed,MAAf,CAAtE,EAA8F,UAACe,GAAD,EAAS;AAErG,YAAIpB,KAAJ,EAAWN,MAAM,CAAC,IAAIU,KAAJ,CAAUgB,GAAV,CAAD,CAAN;AAEZ,OAJD;;AAMA3B,MAAAA,OAAO,CAAC,IAAD,CAAP;AAED,KA7BD;AA+BD,GAxCM,CAAP;AAyCD,CA1CD;;eA4CeF,W","sourcesContent":["import CreateConnection from '../CreateConnection/CreateConnection';\r\nimport fs  from 'fs';\r\nimport path from 'path';\r\n\r\n\r\n/**\r\n *Funcion que hace una query a la base de datos para obtener una copia del schema en formato json.\r\n *\r\n */\r\nconst SchemaQuery = () => {\r\n  return new Promise(( resolve, reject ) => {\r\n\r\n    //Se crea el string de la query y el objeto de a conexion\r\n    const mysqlQuery = `select TABLE_NAME, COLUMN_NAME, DATA_TYPE from Information_schema.columns where TABLE_SCHEMA = 'heroku_8e679e6d32fb43a'`,\r\n          connection  = CreateConnection;\r\n\r\n    connection.connect();\r\n\r\n    // Se realiza la query\r\n    connection.query( mysqlQuery, (error, results, fields) => {\r\n\r\n      connection.end();\r\n\r\n      if (error) reject(new Error(error));\r\n\r\n      //Si no hubo error, se hace un objeto schema, donde cada nombre de la tabla es una \r\n      //propiedad del objeto, y cada columna es una propiedad anidada con el tipo de dato que es.\r\n      const schema = {};\r\n\r\n      for( let tupla of results ) {\r\n        if( !(tupla.TABLE_NAME in schema )) {\r\n          schema[tupla.TABLE_NAME] = {};\r\n        }\r\n        schema[tupla.TABLE_NAME][tupla.COLUMN_NAME] = tupla.DATA_TYPE;\r\n      }\r\n\r\n      //Se guarda la ultima vez que se actualizo el schema\r\n      schema.lastUpdate = Date.now();\r\n      \r\n      //Se guarda el schema en formato JSON\r\n      fs.writeFile( path.join( __dirname, '../../ServerFiles/Schema.json'), JSON.stringify(schema), (err) => {\r\n\r\n        if (error) reject(new Error(err));\r\n\r\n      })\r\n\r\n      resolve(null);\r\n\r\n    });\r\n\r\n  })\r\n}\r\n\r\nexport default SchemaQuery;\r\n"],"file":"SchemaQuery.js"}